package com.findingemos.felicity.emoticon;

import java.util.Arrays;

import android.app.Activity;
import android.content.Intent;
import android.graphics.PixelFormat;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import android.widget.LinearLayout;

import com.findingemos.felicity.R;
import com.findingemos.felicity.backend.EmotionDatabase;
import com.findingemos.felicity.emoticonselector.EmotionSelectorActivity;
import com.findingemos.felicity.general.ActivityIndicator;
import com.findingemos.felicity.general.ActivitySwitchListener;
import com.findingemos.felicity.util.SimpleSwipeListener;
import com.findingemos.felicity.util.Swipeable;
import com.findingemos.felicity.visualization.VisualizationActivity;

/**
 * This is the main activity. This screen show the current emotion of the user.
 * Furthermore, it has a scroll view that allows the user to select an emotion.<br>
 * 
 * 
 * @author Niels
 * @version 0.1
 */
public class EmotionActivity extends Activity implements Swipeable {
	// Final boolean variable to check whether drag and drop is enabled.
	public static final boolean DRAG_AND_DROP = Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;
	// The database to call
	public static EmotionDatabase DATABASE;

	// Code for requesting an emotion.
	public static final int EMOTION_REQUEST_CODE = 1;

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onCreate(android.os.Bundle)
	 */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		// This method is called when the activity is first created.
		super.onCreate(savedInstanceState);

		// Create the database
		DATABASE = new EmotionDatabase(this);
		DATABASE.open();
		DATABASE.readEmotionDatabase();

		// Print the android version
		Log.e("Android version", "" + Build.VERSION.SDK_INT);

		/*
		 * These two method calls are suggested by a site to avoid the blocks
		 * when drawing gradients. These lines should make the transition
		 * between the colors more smoothly.
		 */
		getWindow().setFormat(PixelFormat.RGBA_8888);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_DITHER);

		/*
		 * This method sets how this view should be constructed. These details
		 * are specified in "emotion.xml". To access that xml file, you use the
		 * variables in the autogenerated "R" class.
		 */
		setContentView(R.layout.emotion_activity);

		// This method will fill the HorizontalScroller (see xml) with
		// emoticons.
		fillEmoticonSelection();

		// Add a touch listener.
		EmotionDrawer drawer = (EmotionDrawer) findViewById(R.id.emoticonDrawer);
		drawer.setOnTouchListener(new SimpleSwipeListener(this));

		// Add a view change listener
		ActivityIndicator indicator = (ActivityIndicator) findViewById(R.id.activityIndicator);
		indicator.addListener(new ActivitySwitchListener() {
			/*
			 * (non-Javadoc)
			 * 
			 * @see com.findingemos.felicity.general.ActivitySwitchListener#
			 * activitySelected(int)
			 */
			@Override
			public void activitySelected(int index) {
				if (index == 1)
					switchToVisualization();
			}
		});

		EmotionExpander expander = (EmotionExpander) findViewById(R.id.emotionExpander);
		expander.setOnTouchListener(new View.OnTouchListener() {
			/*
			 * (non-Javadoc)
			 * 
			 * @see android.view.View.OnTouchListener#onTouch(android.view.View,
			 * android.view.MotionEvent)
			 */
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				if (event.getAction() != MotionEvent.ACTION_DOWN)
					return false;
				switchToEmotionSelection();
				return true;
			}
		});

		overridePendingTransition(R.anim.lefttoright_emotion,
				R.anim.righttoleft_emotion);
	}

	/**
	 * This method fills the horizontal scroller with all the emoticons.<br>
	 * <br>
	 * The available emoticons are defined in Emoticon.java.<br>
	 * <br>
	 * The emoticons are put in a LinearLayout that is placed inside a
	 * HorizontalScroller. The HorizontalScroller allows you to scroll through a
	 * view that is much bigger than the scroller itself. Therefore we add all
	 * the emoticons after each other in the horizontal scroller;
	 * 
	 */
	private void fillEmoticonSelection() {
		// Get the linear layout to put the emoticon views in.
		LinearLayout layout = (LinearLayout) findViewById(R.id.horizontalEmoticonScrollerLayout);

		// Find the EmoticonDrawer view.
		EmotionDrawer drawer = (EmotionDrawer) findViewById(R.id.emoticonDrawer);

		Emotion[] sorted = Emotion.values();
		Arrays.sort(sorted, Emotion.getComparator());

		for (int i = 0; i < sorted.length; ++i) {
			// Create the layout paramters
			LayoutParams layoutParameters = new LayoutParams(
					LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
			EmotionView view = new EmotionView(this, sorted[i]);
			view.setMinimumWidth(80);

			// IMPORTANT! this line makes sure the name of the icon is drawn!
			view.addListener(drawer);
			layout.addView(view, layoutParameters);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onCreateOptionsMenu(android.view.Menu)
	 */
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.activity_emotion, menu);
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.findingemos.felicity.general.SimpleSwipeListener#onSwipeLeft()
	 */
	public void onSwipeLeft() {
		Log.d("--scrolled--", "scrolled to the left!");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.findingemos.felicity.general.SimpleSwipeListener#onSwipeRight()
	 */
	public void onSwipeRight() {
		Log.d("--scrolled--", "scrolled to the right!");
		switchToVisualization();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.findingemos.felicity.util.Swipeable#onSwipeUp()
	 */
	@Override
	public void onSwipeUp() {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.findingemos.felicity.util.Swipeable#onSwipeDown()
	 */
	@Override
	public void onSwipeDown() {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onDestroy()
	 */
	@Override
	protected void onDestroy() {
		super.onDestroy();
		DATABASE.close();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onResume()
	 */
	@Override
	protected void onResume() {
		super.onResume();
		DATABASE.open();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onDestroy()
	 */
	@Override
	protected void onPause() {
		super.onPause();
		DATABASE.close();
	}

	/**
	 * 
	 */
	private void switchToVisualization() {
		Intent intent = new Intent(this, VisualizationActivity.class);
		startActivity(intent);
	}

	/**
	 * 
	 */
	private void switchToEmotionSelection() {
		Intent intent = new Intent(this, EmotionSelectorActivity.class);
		overridePendingTransition(R.anim.uptodown_emotion,
				R.anim.downtoup_emotion);
		startActivityForResult(intent, EMOTION_REQUEST_CODE);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onActivityResult(int, int,
	 * android.content.Intent)
	 */
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		Log.i("Result", "Got a result!");
		if (resultCode != RESULT_OK)
			return;

		if (requestCode == EMOTION_REQUEST_CODE) {

			Log.i("Result", "Got the result!");
			EmotionDrawer drawer = (EmotionDrawer) findViewById(R.id.emoticonDrawer);
			int uniqueEmotionId = data.getIntExtra("emotion", 0);
			Emotion emotion = Emotion.getEmoticonByUniqueId(uniqueEmotionId);
			drawer.onEmotionSelected(emotion);
			drawer.onEmotionDoubleTapped(emotion);
		}
	}
}
